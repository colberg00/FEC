
--=======================================================
--  Entity decleration
--=======================================================

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity Dekodmini_v1 is
port(
s1 : in std_logic_vector(7 downto 0);
s3 : in std_logic_vector(7 downto 0);
CLK : in std_logic;
f0  : out std_logic;
f1  : out std_logic;
f2  : out std_logic;
e1  : out std_logic_vector(7 downto 0);
e21  : out std_logic_vector(8 downto 0);
e22  : out std_logic_vector(8 downto 0));

end entity Dekodmini_v1;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity log is
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity antilog is
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity rod1 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity rod2 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity tjekrod is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic);
end entity;


    --DE10_LITE_Empty_Top:
    --
-------------- CLOCK ----------
--input           ADC_CLK_10,
--input           MAX10_CLK1_50,
--input           MAX10_CLK2_50,
    --
-------------- SDRAM ----------
--output    [12:0] DRAM_ADDR,
--output     [1:0] DRAM_BA,
--output           DRAM_CAS_N,
--output           DRAM_CKE,
--output           DRAM_CLK,
--output           DRAM_CS_N,
--inout    [15:0] DRAM_DQ,
--output           DRAM_LDQM,
--output           DRAM_RAS_N,
--output           DRAM_UDQM,
--output           DRAM_WE_N,
    --
-------------- SEG7 ----------
--output     [7:0] HEX0,
--output     [7:0] HEX1,
--output     [7:0] HEX2,
--output     [7:0] HEX3,
--output     [7:0] HEX4,
--output     [7:0] HEX5,
    --
-------------- KEY ----------
--input     [1:0] KEY,
    --
-------------- LED ----------
--output     [9:0] LEDR,
    --
-------------- SW ----------
--input     [9:0] SW,
    --
-------------- VGA ----------
--output     [3:0] VGA_B,
--output     [3:0] VGA_G,
--output           VGA_HS,
--output     [3:0] VGA_R,
--output           VGA_VS,
    --
-------------- Accelerometer ----------
--output           GSENSOR_CS_N,
--input     [2:1] GSENSOR_INT,
--output           GSENSOR_SCLK,
--inout           GSENSOR_SDI,
--inout           GSENSOR_SDO,
    --
-------------- Arduino ----------
--inout    [15:0] ARDUINO_IO,
--inout           ARDUINO_RESET_N,
    --
-------------- GPIO, GPIO connect to GPIO Default ----------
--inout    [35:0] GPIO




--=======================================================
-- Architecture declaration
--=======================================================
architecture Dekodmini_v1_arch of Dekodmini_v1 is

signal s1_log: std_logic_vector(7 downto 0);
signal s3_delay: std_logic_vector(7 downto 0);


signal logt_out: std_logic_vector(7 downto 0);
signal antilogt_out: std_logic_vector(7 downto 0);
signal logt_out2: std_logic_vector(7 downto 0);
signal logt_out3: std_logic_vector(7 downto 0);

signal s1s1s1_log: std_logic_vector(9 downto 0);
signal s3_delay2: std_logic_vector(7 downto 0);
signal s3_delay3: std_logic_vector(7 downto 0);
signal s3_delay4: std_logic_vector(7 downto 0);
signal s3_delay5: std_logic_vector(7 downto 0);
signal s3_delay6: std_logic_vector(7 downto 0);
signal s3_delay7: std_logic_vector(7 downto 0);
signal s3_delay8: std_logic_vector(7 downto 0);



signal f0_delay: std_logic;
signal f0_delay1: std_logic;
signal f0_delay2: std_logic;
signal f0_delay3: std_logic;
signal f0_delay4: std_logic;
signal f0_delay5: std_logic;
signal f0_delay6: std_logic;
signal f0_delay7: std_logic;
signal f0_delay8: std_logic;
 
signal f0d_delay : std_logic;

signal f1_delay: std_logic;
signal f1_delay1: std_logic;
signal f1_delay2: std_logic;

signal s1_power3: std_logic_vector(8 downto 0);
signal s1_power3_f: std_logic_vector(8 downto 0);
signal s1_power3_f_delay: std_logic_vector(7 downto 0);
signal s1_power3_f_delay1: std_logic_vector(7 downto 0);
signal s1_power3_f_delay2: std_logic_vector(7 downto 0);
signal s1_power3_f_delay3: std_logic_vector(7 downto 0);
signal s1_power3_f_log: std_logic_vector(7 downto 0);


signal s1_log_delay : std_logic_vector(7 downto 0);
signal s1_log_delay1 : std_logic_vector(7 downto 0);
signal s1_log_delay2 : std_logic_vector(7 downto 0);
signal s1_log_delay3 : std_logic_vector(7 downto 0);
signal s1_log_delay4 : std_logic_vector(7 downto 0);
signal s1_log_delay5 : std_logic_vector(7 downto 0);
signal s1_log_delay6 : std_logic_vector(7 downto 0);
signal s1_log_delay7 : std_logic_vector(7 downto 0);

signal s1_3_antilog : std_logic_vector(7 downto 0);
signal s1_3_anitlog_delay : std_logic_vector(7 downto 0);

signal xos13s3 : std_logic_vector(7 downto 0);

signal sigma2 : std_logic_vector(7 downto 0);

signal A : std_logic_vector(8 downto 0);

signal rod1_intern : std_logic_vector(7 downto 0);

signal rod2_intern : std_logic_vector(7 downto 0);

signal rod_tjek_intern : std_logic;

signal rod1_intern_delay : std_logic_vector(7 downto 0);

signal rod2_intern_delay : std_logic_vector(7 downto 0);

signal rod_tjek_intern_delay : std_logic;

signal f2_delay : std_logic;

signal e1d_delay : std_logic_vector(7 downto 0);

signal f1d_delay : std_logic;

signal e21d_delay : std_logic_vector(8 downto 0);

signal e22d_delay : std_logic_vector(8 downto 0);

signal f2d_delay : std_logic;






component log
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component antilog
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component rod1 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component rod2 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;


component tjekrod is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic);
end component;

begin

log1 : log port map(num => s1, data_out => logt_out);
logt2 : log port map(num => s3, data_out => logt_out2);
logt3 : log port map(num => xos13s3, data_out => logt_out3);
antilog1 : antilog port map(num => s1_power3_f(7 downto 0), data_out => antilogt_out);
rod11 : rod1 port map(num => A, data_out => rod1_intern);
rod22 : rod2 port map(num => A, data_out => rod2_intern);
rodtjek1 : tjekrod port map(num => A, data_out => rod_tjek_intern);



process (CLK)
begin

if (rising_edge(CLK)) then

s1_log <=logt_out;

s3_delay <= s3;

if(s1="000" and s3="000") then

f0_delay<='1';

else

f0_delay <= '0';

end if;

end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then

s1s1s1_log <= ("00"&s1_log)+("00"&s1_log)+("00"&s1_log);

s3_delay2 <= s3_delay;

f0_delay1 <= f0_delay;

s1_log_delay <= s1_log;

end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then



f0_delay2 <= f0_delay1;

s3_delay3 <= s3_delay2;

s1_log_delay1 <= s1_log_delay;

if (s1s1s1_log > 254) then

s1_power3 <= s1s1s1_log-255;

else

s1_power3 <= s1s1s1_log;

end if;


end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


f0_delay3 <= f0_delay2;

s3_delay4 <= s3_delay3;

s1_log_delay2 <= s1_log_delay1;

if (s1_power3 > 254) then

s1_power3_f <= s1_power3-255;

else

s1_power3_f <= s1_power3;

end if;


end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then

s1_power3_f_delay <= s1_power3_f(7 downto 0);

s3_delay5 <= s3_delay4;

s1_3_antilog <=antilogt_out;

f0_delay4 <= f0_delay3;

s1_log_delay3 <= s1_log_delay2;



end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay1 <= s1_power3_f_delay;

s3_delay6 <= s3_delay5;

 s1_3_anitlog_delay <= s1_3_antilog;

f0_delay5 <= f0_delay4;

s1_log_delay4 <= s1_log_delay3;

xos13s3 <= s3_delay5 xor s1_3_antilog;



end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay2 <= s1_power3_f_delay1;

s3_delay7 <= s3_delay6;


f0_delay6 <= f0_delay5;

s1_log_delay5 <= s1_log_delay4;

sigma2 <= logt_out3;

if(s1_3_anitlog_delay = s3_delay6) then


if ((xos13s3="000")or(not s3_delay6= "000")) then

f1_delay <= '1';
else
f1_delay <= '0';

end if;

else
f1_delay <= '0';
end if;




end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay3 <= s1_power3_f_delay2;

s3_delay8 <= s3_delay7;


f0_delay7 <= f0_delay6;

s1_log_delay6 <= s1_log_delay5;

f1_delay1 <= f1_delay;

A <= ('0'&sigma2) - ('0'&s1_power3_f_delay2) + "0111";




end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then




f0_delay8 <= f0_delay7;

s1_log_delay7 <= s1_log_delay6;

f1_delay2 <= f1_delay1;

rod1_intern_delay <= rod1_intern;

rod2_intern_delay <= rod2_intern;

rod_tjek_intern_delay <= rod_tjek_intern;





end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then




f0d_delay <= f0_delay8;

e1d_delay <= 7-s1_log_delay7;

f1d_delay <= f1_delay2;

e21d_delay <= ('0'&rod1_intern_delay)+('0'&s1_log_delay7);

e22d_delay <= ('0'&rod2_intern_delay)+('0'&s1_log_delay7);


if(f1_delay2 = '1') then

f2d_delay <= '0';

else

f2d_delay <= rod_tjek_intern_delay;

end if;





end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then



f0 <= f0d_delay;

e1 <= e1d_delay;

f1 <= f1d_delay ;

if(e21d_delay>"0110") then
e21<=e21d_delay-"0111";
else
e21<=7-e21d_delay;
end if;

if(e22d_delay>"0110") then
e22<=e22d_delay-"0111";
else
e22<=7-e22d_delay;
end if;


f2 <= f2d_delay;




end if;
end process;



end architecture;




architecture log_arch of log is

type ROM_type is array (0 to 255) of std_logic_vector(8 downto 0);

constant ROM : ROM_type := (
  0 => "000000000", 1 => "000000001", 2 => "000011001", 3 => "000000010", 4 => "000110010", 5 => "000011010", 6 => "110001110", 7 => "000000011",
  8 => "110111111", 9 => "000110011", 10 => "111011110", 11 => "000011011", 12 => "011010000", 13 => "110001111", 14 => "100101011", 15 => "000000100",
  16 => "011001100", 17 => "111000000", 18 => "000001110", 19 => "000110100", 20 => "100011101", 21 => "111011111", 22 => "100000001", 23 => "000011100",
  24 => "110000001", 25 => "011010100", 26 => "111110000", 27 => "110010000", 28 => "000001000", 29 => "100101100", 30 => "111001111", 31 => "000000101",
  32 => "100010010", 33 => "111000001", 34 => "000111010", 35 => "000110101", 36 => "001001100", 37 => "110001111", 38 => "000010100", 39 => "000000110",
  40 => "100010001", 41 => "111000000", 42 => "001011110", 43 => "000110110", 44 => "100100110", 45 => "000001011", 46 => "111100001", 47 => "110010000",
  48 => "001001000", 49 => "000111010", 50 => "100000111", 51 => "100011110", 52 => "111000100", 53 => "100001001", 54 => "100011100", 55 => "000011110",
  56 => "111001010", 57 => "100001000", 58 => "100100111", 59 => "000110111", 60 => "001010001", 61 => "110010001", 62 => "100000110", 63 => "000011001",
  64 => "001111011", 65 => "111000010", 66 => "010000011", 67 => "100101101", 68 => "010010110", 69 => "111001000", 70 => "011001011", 71 => "111100000",
  72 => "100101111", 73 => "111001001", 74 => "100000100", 75 => "000011010", 76 => "010010000", 77 => "111000011", 78 => "010011011", 79 => "110010011",
  80 => "000001010", 81 => "000010010", 82 => "011000111", 83 => "011000010", 84 => "010011100", 85 => "111000101", 86 => "010110000", 87 => "100101110",
  88 => "011010000", 89 => "000011111", 90 => "111010101", 91 => "111000111", 92 => "000011110", 93 => "111011000", 94 => "100011001", 95 => "000011011",
  96 => "010111000", 97 => "111010000", 98 => "011011000", 99 => "100110111", 100 => "001100000", 101 => "100010111", 102 => "000110010", 103 => "100100010",
  104 => "100001111", 105 => "100110100", 106 => "011110010", 107 => "111011010", 108 => "011001111", 109 => "111001101", 110 => "011000110", 111 => "100101101",
  112 => "111101011", 113 => "111001010", 114 => "101000000", 115 => "100100101", 116 => "111010011", 117 => "011011001", 118 => "100101011", 119 => "000000111",
  120 => "110010000", 121 => "110000110", 122 => "111001110", 123 => "111001010", 124 => "011000000", 125 => "001011111", 126 => "000110001", 127 => "100011110",
  128 => "110001110", 129 => "100000000", 130 => "100011111", 131 => "100011110", 132 => "000011111", 133 => "100110010", 134 => "011011001", 135 => "100010001",
  136 => "011111000", 137 => "100110011", 138 => "011010010", 139 => "011001100", 140 => "111011010", 141 => "011010100", 142 => "000011011", 143 => "100101010",
  144 => "111001000", 145 => "011011010", 146 => "111010011", 147 => "100110000", 148 => "100110001", 149 => "100001110", 150 => "011001011", 151 => "100101101",
  152 => "000001011", 153 => "000011000", 154 => "011011111", 155 => "111001100", 156 => "011000110", 157 => "100111011", 158 => "011001000", 159 => "100011001",
  160 => "110000010", 161 => "111011010", 162 => "011011010", 163 => "111011010", 164 => "010011011", 165 => "100110010", 166 => "011010010", 167 => "000001001",
  168 => "000000001", 169 => "000111111", 170 => "100101110", 171 => "000001011", 172 => "000111000", 173 => "111011010", 174 => "000011010", 175 => "100010010",
  176 => "000011111", 177 => "100101111", 178 => "011001001", 179 => "100010010", 180 => "000011111", 181 => "100101011", 182 => "111010011", 183 => "100110010",
  184 => "011000010", 185 => "000010011", 186 => "000111001", 187 => "111000011", 188 => "100101101", 189 => "100110011", 190 => "000010011", 191 => "000001000",
  192 => "000011000", 193 => "100111111", 194 => "011000110", 195 => "011000111", 196 => "000010011", 197 => "000111110", 198 => "111011011", 199 => "100011111",
  200 => "011011100", 201 => "000011011", 202 => "100011110", 203 => "011000001", 204 => "111011010", 205 => "011001100", 206 => "011000000", 207 => "111000011",
  208 => "111010011", 209 => "111010011", 210 => "000011111", 211 => "011011111", 212 => "100010001", 213 => "011001011", 214 => "000000011", 215 => "000011011",
  216 => "000000011", 217 => "100111001", 218 => "000001010", 219 => "100010011", 220 => "100010011", 221 => "011000111", 222 => "000001001", 223 => "000011011",
  224 => "011011001", 225 => "000111111", 226 => "011000000", 227 => "011000111", 228 => "000001001", 229 => "100111111", 230 => "111010011", 231 => "000011001",
  232 => "011011000", 233 => "111001000", 234 => "100101100", 235 => "100010010", 236 => "111000011", 237 => "100101011", 238 => "000000111", 239 => "100000111",
  240 => "100110111", 241 => "000010000", 242 => "100011000", 243 => "000111000", 244 => "011000000", 245 => "100011001", 246 => "011011001", 247 => "111000001",
  248 => "011011111", 249 => "011011010", 250 => "011000010", 251 => "000001001", 252 => "000001011", 253 => "111001010", 254 => "000000010", 255 => "000011011"
);
begin

data_out <= ROM(to_integer(unsigned(num)));
end architecture


architecture antilog_arch of antilog is

type ROM_type is array (0 to 255) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := (
  0 => "00000001", 1 => "00000010", 2 => "00000100", 3 => "00001000", 4 => "00010000", 5 => "00100000", 6 => "01000000", 7 => "10000000",
  8 => "00011101", 9 => "00111010", 10 => "01110100", 11 => "11101000", 12 => "11001101", 13 => "10000111", 14 => "00010011", 15 => "00100110",
  16 => "01001100", 17 => "10011000", 18 => "00101101", 19 => "01011010", 20 => "10110100", 21 => "01110101", 22 => "11101010", 23 => "11001001",
  24 => "10001111", 25 => "00000011", 26 => "00000110", 27 => "00001100", 28 => "00011000", 29 => "00110000", 30 => "01100000", 31 => "11000000",
  32 => "10011101", 33 => "00100111", 34 => "01001110", 35 => "10011100", 36 => "00100101", 37 => "01001010", 38 => "10010100", 39 => "00110101",
  40 => "01101010", 41 => "11010100", 42 => "10110111", 43 => "01110111", 44 => "11101110", 45 => "11000001", 46 => "10011111", 47 => "00100011",
  48 => "01000110", 49 => "10001100", 50 => "00000101", 51 => "00001010", 52 => "00010100", 53 => "00101000", 54 => "01010000", 55 => "10100000",
  56 => "01011101", 57 => "10111010", 58 => "01101001", 59 => "11010101", 60 => "10111001", 61 => "01101111", 62 => "11011110", 63 => "10100001",
  64 => "01011111", 65 => "10111110", 66 => "01100001", 67 => "11000010", 68 => "10011001", 69 => "00101111", 70 => "01011110", 71 => "10111100",
  72 => "01100011", 73 => "11000101", 74 => "10001011", 75 => "00001111", 76 => "00011110", 77 => "00111100", 78 => "01111000", 79 => "11110000",
  80 => "11111101", 81 => "11100111", 82 => "11010011", 83 => "10111011", 84 => "01101011", 85 => "11010110", 86 => "10110001", 87 => "01111110",
  88 => "11111110", 89 => "11100001", 90 => "11011111", 91 => "10100011", 92 => "01011011", 93 => "10110110", 94 => "01110011", 95 => "11100100",
  96 => "11011001", 97 => "10101111", 98 => "01001111", 99 => "10010110", 100 => "00110111", 101 => "01101110", 102 => "11011100", 103 => "10100101",
  104 => "01010011", 105 => "10100110", 106 => "01010001", 107 => "10100010", 108 => "01010101", 109 => "10101010", 110 => "01001001", 111 => "10010010",
  112 => "00111001", 113 => "01110010", 114 => "11100100", 115 => "11010101", 116 => "10110111", 117 => "01110011", 118 => "11100110", 119 => "11010001",
  120 => "10111111", 121 => "01100011", 122 => "11000101", 123 => "10010001", 124 => "00111111", 125 => "01111110", 126 => "11111100", 127 => "11100101",
  128 => "11011011", 129 => "10110011", 130 => "01111101", 131 => "11111010", 132 => "11011111", 133 => "10101101", 134 => "01001101", 135 => "10011010",
  136 => "00110101", 137 => "01101010", 138 => "11010100", 139 => "10101001", 140 => "01010110", 141 => "10101100", 142 => "01000101", 143 => "10001010",
  144 => "00001001", 145 => "00010010", 146 => "00100100", 147 => "01001000", 148 => "10010000", 149 => "00111110", 150 => "01111100", 151 => "11111000",
  152 => "11110101", 153 => "11110111", 154 => "11111001", 155 => "11111011", 156 => "11111101", 157 => "11110011", 158 => "11100111", 159 => "11011111",
  160 => "10101101", 161 => "01001011", 162 => "10010110", 163 => "00101101", 164 => "01011010", 165 => "10110100", 166 => "01110001", 167 => "11100010",
  168 => "11010010", 169 => "10110011", 170 => "01111101", 171 => "11111010", 172 => "11111011", 173 => "11111101", 174 => "11101110", 175 => "11011100",
  176 => "10100100", 177 => "01001001", 178 => "10010010", 179 => "00111101", 180 => "01111010", 181 => "11110100", 182 => "11101001", 183 => "11001111",
  184 => "10010111", 185 => "00101001", 186 => "01010010", 187 => "10100100", 188 => "01001000", 189 => "10010000", 190 => "00111110", 191 => "01111100",
  192 => "11111000", 193 => "11110101", 194 => "11101011", 195 => "11001111", 196 => "10011111", 197 => "00100011", 198 => "01000110", 199 => "10001100",
  200 => "00000101", 201 => "00001010", 202 => "00010100", 203 => "00101000", 204 => "01010000", 205 => "10100000", 206 => "01011101", 207 => "10111010",
  208 => "01101001", 209 => "11010101", 210 => "10111001", 211 => "01101111", 212 => "11011110", 213 => "10101101", 214 => "01001101", 215 => "10011010",
  216 => "00110101", 217 => "01101010", 218 => "11010100", 219 => "10101001", 220 => "01010110", 221 => "10101100", 222 => "01000101", 223 => "10001010",
  224 => "00001001", 225 => "00010010", 226 => "00100100", 227 => "01001000", 228 => "10010000", 229 => "00111110", 230 => "01111100", 231 => "11111000",
  232 => "11110101", 233 => "11110111", 234 => "11111001", 235 => "11111011", 236 => "11111101", 237 => "11110011", 238 => "11100111", 239 => "11011111",
  240 => "10101101", 241 => "01001011", 242 => "10010110", 243 => "00101101", 244 => "01011010", 245 => "10110100", 246 => "01110001", 247 => "11100010",
  248 => "11010010", 249 => "10110011", 250 => "01111101", 251 => "11111010", 252 => "11011100", 253 => "10100100", 254 => "01001001", 255 => "10010010"
);
begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture


architecture rod1_arch of rod1 is

type ROM_type is array (0 to 13) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := ( 0 =>  b"000",
1 =>  b"010",
2 =>  b"100",
3 =>  b"000",
4 =>  b"001",
5 =>  b"000",
6 =>  b"000",
7 =>  b"000",
8 =>  b"010",
9 =>  b"100",
10 =>  b"000",
11 =>  b"001",
12 =>  b"000",
13 =>  b"000");

begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;

architecture rod2_arch of rod2 is

type ROM_type is array (0 to 13) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := ( 0 =>  b"000",
1 =>  b"000",
2 =>  b"101",
3 =>  b"000",
4 =>  b"011",
5 =>  b"000",
6 =>  b"000",
7 =>  b"000",
8 =>  b"000",
9 =>  b"101",
10 =>  b"000",
11 =>  b"011",
12 =>  b"000",
13 =>  b"000");

begin


data_out <= ROM(to_integer(unsigned(num)));

end architecture;


architecture tjekrod_arch of tjekrod is

type ROM_type is array (0 to 13) of std_logic;

constant ROM : ROM_type := (
0 => '0',
1 => '1',
2 => '1',
3 => '0',
4 => '1',
5 => '0',
6 => '0',
7 => '0',
8 => '1',
9 => '1',
10 => '0',
11 => '1',
12 => '0',
13 => '0');

begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;



