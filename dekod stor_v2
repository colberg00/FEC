
--=======================================================
--  Entity decleration
--=======================================================

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity dekodstor is
port(
s1 : in std_logic_vector(7 downto 0);
s3 : in std_logic_vector(7 downto 0);
CLK : in std_logic;
f0  : out std_logic;
f1  : out std_logic;
f2  : out std_logic;
e1  : out std_logic_vector(7 downto 0);
e21  : out std_logic_vector(8 downto 0);
e22  : out std_logic_vector(8 downto 0));

end entity dekodstor;


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity log is
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity antilog is
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity rod1 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(8 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity rod2 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(8 downto 0));
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity tjekrod is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic);
end entity;


    --DE10_LITE_Empty_Top:
    --
-------------- CLOCK ----------
--input           ADC_CLK_10,
--input           MAX10_CLK1_50,
--input           MAX10_CLK2_50,
    --
-------------- SDRAM ----------
--output    [12:0] DRAM_ADDR,
--output     [1:0] DRAM_BA,
--output           DRAM_CAS_N,
--output           DRAM_CKE,
--output           DRAM_CLK,
--output           DRAM_CS_N,
--inout    [15:0] DRAM_DQ,
--output           DRAM_LDQM,
--output           DRAM_RAS_N,
--output           DRAM_UDQM,
--output           DRAM_WE_N,
    --
-------------- SEG7 ----------
--output     [7:0] HEX0,
--output     [7:0] HEX1,
--output     [7:0] HEX2,
--output     [7:0] HEX3,
--output     [7:0] HEX4,
--output     [7:0] HEX5,
    --
-------------- KEY ----------
--input     [1:0] KEY,
    --
-------------- LED ----------
--output     [9:0] LEDR,
    --
-------------- SW ----------
--input     [9:0] SW,
    --
-------------- VGA ----------
--output     [3:0] VGA_B,
--output     [3:0] VGA_G,
--output           VGA_HS,
--output     [3:0] VGA_R,
--output           VGA_VS,
    --
-------------- Accelerometer ----------
--output           GSENSOR_CS_N,
--input     [2:1] GSENSOR_INT,
--output           GSENSOR_SCLK,
--inout           GSENSOR_SDI,
--inout           GSENSOR_SDO,
    --
-------------- Arduino ----------
--inout    [15:0] ARDUINO_IO,
--inout           ARDUINO_RESET_N,
    --
-------------- GPIO, GPIO connect to GPIO Default ----------
--inout    [35:0] GPIO




--=======================================================
-- Architecture declaration
--=======================================================
architecture dekodstor_arch of dekodstor is

signal s1_log: std_logic_vector(7 downto 0);
signal s3_delay: std_logic_vector(7 downto 0);


signal logt_out: std_logic_vector(7 downto 0);
signal antilogt_out: std_logic_vector(7 downto 0);
signal logt_out2: std_logic_vector(7 downto 0);
signal logt_out3: std_logic_vector(7 downto 0);

signal s1s1s1_log: std_logic_vector(9 downto 0);
signal s3_delay2: std_logic_vector(7 downto 0);
signal s3_delay3: std_logic_vector(7 downto 0);
signal s3_delay4: std_logic_vector(7 downto 0);
signal s3_delay5: std_logic_vector(7 downto 0);
signal s3_delay6: std_logic_vector(7 downto 0);
signal s3_delay7: std_logic_vector(7 downto 0);
signal s3_delay8: std_logic_vector(7 downto 0);



signal f0_delay: std_logic;
signal f0_delay1: std_logic;
signal f0_delay2: std_logic;
signal f0_delay3: std_logic;
signal f0_delay4: std_logic;
signal f0_delay5: std_logic;
signal f0_delay6: std_logic;
signal f0_delay7: std_logic;
signal f0_delay8: std_logic;
 
signal f0d_delay : std_logic;

signal f1_delay: std_logic;
signal f1_delay1: std_logic;
signal f1_delay2: std_logic;

signal s1_power3: std_logic_vector(9 downto 0);
signal s1_power3_f: std_logic_vector(9 downto 0);
signal s1_power3_f_delay: std_logic_vector(7 downto 0);
signal s1_power3_f_delay1: std_logic_vector(7 downto 0);
signal s1_power3_f_delay2: std_logic_vector(7 downto 0);
signal s1_power3_f_delay3: std_logic_vector(7 downto 0);
signal s1_power3_f_log: std_logic_vector(7 downto 0);


signal s1_log_delay : std_logic_vector(7 downto 0);
signal s1_log_delay1 : std_logic_vector(7 downto 0);
signal s1_log_delay2 : std_logic_vector(7 downto 0);
signal s1_log_delay3 : std_logic_vector(7 downto 0);
signal s1_log_delay4 : std_logic_vector(7 downto 0);
signal s1_log_delay5 : std_logic_vector(7 downto 0);
signal s1_log_delay6 : std_logic_vector(7 downto 0);
signal s1_log_delay7 : std_logic_vector(7 downto 0);

signal s1_3_antilog : std_logic_vector(7 downto 0);
signal s1_3_anitlog_delay : std_logic_vector(7 downto 0);

signal xos13s3 : std_logic_vector(7 downto 0);

signal sigma2 : std_logic_vector(7 downto 0);

signal A : std_logic_vector(8 downto 0);

signal rod1_intern : std_logic_vector(7 downto 0);

signal rod2_intern : std_logic_vector(7 downto 0);

signal rod_tjek_intern : std_logic;

signal rod1_intern_delay : std_logic_vector(7 downto 0);

signal rod2_intern_delay : std_logic_vector(7 downto 0);

signal rod_tjek_intern_delay : std_logic;

signal f2_delay : std_logic;

signal e1d_delay : std_logic_vector(7 downto 0);

signal f1d_delay : std_logic;

signal e21d_delay : std_logic_vector(8 downto 0);

signal e22d_delay : std_logic_vector(8 downto 0);

signal f2d_delay : std_logic;






component log
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component antilog
port  ( num : in std_logic_vector(7 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component rod1 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;

component rod2 is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic_vector(7 downto 0));
end component;


component tjekrod is
port  ( num : in std_logic_vector(8 downto 0);
data_out : out std_logic);
end component;

begin

log1 : log port map(num => s1, data_out => logt_out);
logt2 : log port map(num => s3, data_out => logt_out2);
logt3 : log port map(num => xos13s3, data_out => logt_out3);
antilog1 : antilog port map(num => s1_power3_f(7 downto 0), data_out => antilogt_out);
rod11 : rod1 port map(num => A, data_out => rod1_intern);
rod22 : rod2 port map(num => A, data_out => rod2_intern);
rodtjek1 : tjekrod port map(num => A, data_out => rod_tjek_intern);



process (CLK)
begin

if (rising_edge(CLK)) then

s1_log <=logt_out;

s3_delay <= s3;

if(s1="00000000" and s3="00000000") then

f0_delay<='1';

else

f0_delay <= '0';

end if;

end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then

s1s1s1_log <= ("00"&s1_log)+("00"&s1_log)+("00"&s1_log);

s3_delay2 <= s3_delay;

f0_delay1 <= f0_delay;

s1_log_delay <= s1_log;

end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then



f0_delay2 <= f0_delay1;

s3_delay3 <= s3_delay2;

s1_log_delay1 <= s1_log_delay;

if (s1s1s1_log > 254) then

s1_power3 <= s1s1s1_log-255;

else

s1_power3 <= s1s1s1_log;

end if;


end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


f0_delay3 <= f0_delay2;

s3_delay4 <= s3_delay3;

s1_log_delay2 <= s1_log_delay1;

if (s1_power3 > 254) then

s1_power3_f <= s1_power3-255;

else

s1_power3_f <= s1_power3;

end if;


end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then

s1_power3_f_delay <= s1_power3_f(7 downto 0);

s3_delay5 <= s3_delay4;

s1_3_antilog <=antilogt_out;

f0_delay4 <= f0_delay3;

s1_log_delay3 <= s1_log_delay2;



end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay1 <= s1_power3_f_delay;

s3_delay6 <= s3_delay5;

 s1_3_anitlog_delay <= s1_3_antilog;

f0_delay5 <= f0_delay4;

s1_log_delay4 <= s1_log_delay3;

xos13s3 <= s3_delay5 xor s1_3_antilog;



end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay2 <= s1_power3_f_delay1;

s3_delay7 <= s3_delay6;


f0_delay6 <= f0_delay5;

s1_log_delay5 <= s1_log_delay4;

sigma2 <= logt_out3;

if(s1_3_anitlog_delay = s3_delay6) then


if ((xos13s3="00000000")or(not s3_delay6= "00000000")) then

f1_delay <= '1';
else
f1_delay <= '0';

end if;

else
f1_delay <= '0';
end if;




end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then


s1_power3_f_delay3 <= s1_power3_f_delay2;

s3_delay8 <= s3_delay7;


f0_delay7 <= f0_delay6;

s1_log_delay6 <= s1_log_delay5;

f1_delay1 <= f1_delay;

A <= ('0'&sigma2) - ('0'&s1_power3_f_delay2) + "011111111";




end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then




f0_delay8 <= f0_delay7;

s1_log_delay7 <= s1_log_delay6;

f1_delay2 <= f1_delay1;

rod1_intern_delay <= rod1_intern;

rod2_intern_delay <= rod2_intern;

rod_tjek_intern_delay <= rod_tjek_intern;





end if;
end process;


process(CLK)
begin

if(rising_edge(CLK)) then




f0d_delay <= f0_delay8;

e1d_delay <= 255-s1_log_delay7;

f1d_delay <= f1_delay2;

e21d_delay <= ('0'&rod1_intern_delay)+('0'&s1_log_delay7);

e22d_delay <= ('0'&rod2_intern_delay)+('0'&s1_log_delay7);


if(f1_delay2 = '1') then

f2d_delay <= '0';

else

f2d_delay <= rod_tjek_intern_delay;

end if;





end if;
end process;

process(CLK)
begin

if(rising_edge(CLK)) then



f0 <= f0d_delay;

e1 <= e1d_delay;

f1 <= f1d_delay ;

if(e21d_delay>"011111110") then
e21<=e21d_delay-"011111111";
else
e21<=7-e21d_delay;
end if;

if(e22d_delay>"011111110") then
e22<=e22d_delay-"011111111";
else
e22<=255-e22d_delay;
end if;


f2 <= f2d_delay;




end if;
end process;



end architecture;




architecture log_arch of log is

type ROM_type is array (0 to 255) of std_logic_vector(8 downto 0);

constant ROM : ROM_type := (
  0 => "000000000", 1 => "000000001", 2 => "000011001", 3 => "000000010", 4 => "000110010", 5 => "000011010", 6 => "110001110", 7 => "000000011",
  8 => "110111111", 9 => "000110011", 10 => "111011110", 11 => "000011011", 12 => "011010000", 13 => "110001111", 14 => "100101011", 15 => "000000100",
  16 => "011001100", 17 => "111000000", 18 => "000001110", 19 => "000110100", 20 => "100011101", 21 => "111011111", 22 => "100000001", 23 => "000011100",
  24 => "110000001", 25 => "011010100", 26 => "111110000", 27 => "110010000", 28 => "000001000", 29 => "100101100", 30 => "111001111", 31 => "000000101",
  32 => "100010010", 33 => "111000001", 34 => "000111010", 35 => "000110101", 36 => "001001100", 37 => "110001111", 38 => "000010100", 39 => "000000110",
  40 => "100010001", 41 => "111000000", 42 => "001011110", 43 => "000110110", 44 => "100100110", 45 => "000001011", 46 => "111100001", 47 => "110010000",
  48 => "001001000", 49 => "000111010", 50 => "100000111", 51 => "100011110", 52 => "111000100", 53 => "100001001", 54 => "100011100", 55 => "000011110",
  56 => "111001010", 57 => "100001000", 58 => "100100111", 59 => "000110111", 60 => "001010001", 61 => "110010001", 62 => "100000110", 63 => "000011001",
  64 => "001111011", 65 => "111000010", 66 => "010000011", 67 => "100101101", 68 => "010010110", 69 => "111001000", 70 => "011001011", 71 => "111100000",
  72 => "100101111", 73 => "111001001", 74 => "100000100", 75 => "000011010", 76 => "010010000", 77 => "111000011", 78 => "010011011", 79 => "110010011",
  80 => "000001010", 81 => "000010010", 82 => "011000111", 83 => "011000010", 84 => "010011100", 85 => "111000101", 86 => "010110000", 87 => "100101110",
  88 => "011010000", 89 => "000011111", 90 => "111010101", 91 => "111000111", 92 => "000011110", 93 => "111011000", 94 => "100011001", 95 => "000011011",
  96 => "010111000", 97 => "111010000", 98 => "011011000", 99 => "100110111", 100 => "001100000", 101 => "100010111", 102 => "000110010", 103 => "100100010",
  104 => "100001111", 105 => "100110100", 106 => "011110010", 107 => "111011010", 108 => "011001111", 109 => "111001101", 110 => "011000110", 111 => "100101101",
  112 => "111101011", 113 => "111001010", 114 => "101000000", 115 => "100100101", 116 => "111010011", 117 => "011011001", 118 => "100101011", 119 => "000000111",
  120 => "110010000", 121 => "110000110", 122 => "111001110", 123 => "111001010", 124 => "011000000", 125 => "001011111", 126 => "000110001", 127 => "100011110",
  128 => "110001110", 129 => "100000000", 130 => "100011111", 131 => "100011110", 132 => "000011111", 133 => "100110010", 134 => "011011001", 135 => "100010001",
  136 => "011111000", 137 => "100110011", 138 => "011010010", 139 => "011001100", 140 => "111011010", 141 => "011010100", 142 => "000011011", 143 => "100101010",
  144 => "111001000", 145 => "011011010", 146 => "111010011", 147 => "100110000", 148 => "100110001", 149 => "100001110", 150 => "011001011", 151 => "100101101",
  152 => "000001011", 153 => "000011000", 154 => "011011111", 155 => "111001100", 156 => "011000110", 157 => "100111011", 158 => "011001000", 159 => "100011001",
  160 => "110000010", 161 => "111011010", 162 => "011011010", 163 => "111011010", 164 => "010011011", 165 => "100110010", 166 => "011010010", 167 => "000001001",
  168 => "000000001", 169 => "000111111", 170 => "100101110", 171 => "000001011", 172 => "000111000", 173 => "111011010", 174 => "000011010", 175 => "100010010",
  176 => "000011111", 177 => "100101111", 178 => "011001001", 179 => "100010010", 180 => "000011111", 181 => "100101011", 182 => "111010011", 183 => "100110010",
  184 => "011000010", 185 => "000010011", 186 => "000111001", 187 => "111000011", 188 => "100101101", 189 => "100110011", 190 => "000010011", 191 => "000001000",
  192 => "000011000", 193 => "100111111", 194 => "011000110", 195 => "011000111", 196 => "000010011", 197 => "000111110", 198 => "111011011", 199 => "100011111",
  200 => "011011100", 201 => "000011011", 202 => "100011110", 203 => "011000001", 204 => "111011010", 205 => "011001100", 206 => "011000000", 207 => "111000011",
  208 => "111010011", 209 => "111010011", 210 => "000011111", 211 => "011011111", 212 => "100010001", 213 => "011001011", 214 => "000000011", 215 => "000011011",
  216 => "000000011", 217 => "100111001", 218 => "000001010", 219 => "100010011", 220 => "100010011", 221 => "011000111", 222 => "000001001", 223 => "000011011",
  224 => "011011001", 225 => "000111111", 226 => "011000000", 227 => "011000111", 228 => "000001001", 229 => "100111111", 230 => "111010011", 231 => "000011001",
  232 => "011011000", 233 => "111001000", 234 => "100101100", 235 => "100010010", 236 => "111000011", 237 => "100101011", 238 => "000000111", 239 => "100000111",
  240 => "100110111", 241 => "000010000", 242 => "100011000", 243 => "000111000", 244 => "011000000", 245 => "100011001", 246 => "011011001", 247 => "111000001",
  248 => "011011111", 249 => "011011010", 250 => "011000010", 251 => "000001001", 252 => "000001011", 253 => "111001010", 254 => "000000010", 255 => "000011011");
  
begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;


architecture antilog_arch of antilog is

type ROM_type is array (0 to 255) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := (
  0 => "00000001", 1 => "00000010", 2 => "00000100", 3 => "00001000", 4 => "00010000", 5 => "00100000", 6 => "01000000", 7 => "10000000",
  8 => "00011101", 9 => "00111010", 10 => "01110100", 11 => "11101000", 12 => "11001101", 13 => "10000111", 14 => "00010011", 15 => "00100110",
  16 => "01001100", 17 => "10011000", 18 => "00101101", 19 => "01011010", 20 => "10110100", 21 => "01110101", 22 => "11101010", 23 => "11001001",
  24 => "10001111", 25 => "00000011", 26 => "00000110", 27 => "00001100", 28 => "00011000", 29 => "00110000", 30 => "01100000", 31 => "11000000",
  32 => "10011101", 33 => "00100111", 34 => "01001110", 35 => "10011100", 36 => "00100101", 37 => "01001010", 38 => "10010100", 39 => "00110101",
  40 => "01101010", 41 => "11010100", 42 => "10110111", 43 => "01110111", 44 => "11101110", 45 => "11000001", 46 => "10011111", 47 => "00100011",
  48 => "01000110", 49 => "10001100", 50 => "00000101", 51 => "00001010", 52 => "00010100", 53 => "00101000", 54 => "01010000", 55 => "10100000",
  56 => "01011101", 57 => "10111010", 58 => "01101001", 59 => "11010101", 60 => "10111001", 61 => "01101111", 62 => "11011110", 63 => "10100001",
  64 => "01011111", 65 => "10111110", 66 => "01100001", 67 => "11000010", 68 => "10011001", 69 => "00101111", 70 => "01011110", 71 => "10111100",
  72 => "01100011", 73 => "11000101", 74 => "10001011", 75 => "00001111", 76 => "00011110", 77 => "00111100", 78 => "01111000", 79 => "11110000",
  80 => "11111101", 81 => "11100111", 82 => "11010011", 83 => "10111011", 84 => "01101011", 85 => "11010110", 86 => "10110001", 87 => "01111110",
  88 => "11111110", 89 => "11100001", 90 => "11011111", 91 => "10100011", 92 => "01011011", 93 => "10110110", 94 => "01110011", 95 => "11100100",
  96 => "11011001", 97 => "10101111", 98 => "01001111", 99 => "10010110", 100 => "00110111", 101 => "01101110", 102 => "11011100", 103 => "10100101",
  104 => "01010011", 105 => "10100110", 106 => "01010001", 107 => "10100010", 108 => "01010101", 109 => "10101010", 110 => "01001001", 111 => "10010010",
  112 => "00111001", 113 => "01110010", 114 => "11100100", 115 => "11010101", 116 => "10110111", 117 => "01110011", 118 => "11100110", 119 => "11010001",
  120 => "10111111", 121 => "01100011", 122 => "11000101", 123 => "10010001", 124 => "00111111", 125 => "01111110", 126 => "11111100", 127 => "11100101",
  128 => "11011011", 129 => "10110011", 130 => "01111101", 131 => "11111010", 132 => "11011111", 133 => "10101101", 134 => "01001101", 135 => "10011010",
  136 => "00110101", 137 => "01101010", 138 => "11010100", 139 => "10101001", 140 => "01010110", 141 => "10101100", 142 => "01000101", 143 => "10001010",
  144 => "00001001", 145 => "00010010", 146 => "00100100", 147 => "01001000", 148 => "10010000", 149 => "00111110", 150 => "01111100", 151 => "11111000",
  152 => "11110101", 153 => "11110111", 154 => "11111001", 155 => "11111011", 156 => "11111101", 157 => "11110011", 158 => "11100111", 159 => "11011111",
  160 => "10101101", 161 => "01001011", 162 => "10010110", 163 => "00101101", 164 => "01011010", 165 => "10110100", 166 => "01110001", 167 => "11100010",
  168 => "11010010", 169 => "10110011", 170 => "01111101", 171 => "11111010", 172 => "11111011", 173 => "11111101", 174 => "11101110", 175 => "11011100",
  176 => "10100100", 177 => "01001001", 178 => "10010010", 179 => "00111101", 180 => "01111010", 181 => "11110100", 182 => "11101001", 183 => "11001111",
  184 => "10010111", 185 => "00101001", 186 => "01010010", 187 => "10100100", 188 => "01001000", 189 => "10010000", 190 => "00111110", 191 => "01111100",
  192 => "11111000", 193 => "11110101", 194 => "11101011", 195 => "11001111", 196 => "10011111", 197 => "00100011", 198 => "01000110", 199 => "10001100",
  200 => "00000101", 201 => "00001010", 202 => "00010100", 203 => "00101000", 204 => "01010000", 205 => "10100000", 206 => "01011101", 207 => "10111010",
  208 => "01101001", 209 => "11010101", 210 => "10111001", 211 => "01101111", 212 => "11011110", 213 => "10101101", 214 => "01001101", 215 => "10011010",
  216 => "00110101", 217 => "01101010", 218 => "11010100", 219 => "10101001", 220 => "01010110", 221 => "10101100", 222 => "01000101", 223 => "10001010",
  224 => "00001001", 225 => "00010010", 226 => "00100100", 227 => "01001000", 228 => "10010000", 229 => "00111110", 230 => "01111100", 231 => "11111000",
  232 => "11110101", 233 => "11110111", 234 => "11111001", 235 => "11111011", 236 => "11111101", 237 => "11110011", 238 => "11100111", 239 => "11011111",
  240 => "10101101", 241 => "01001011", 242 => "10010110", 243 => "00101101", 244 => "01011010", 245 => "10110100", 246 => "01110001", 247 => "11100010",
  248 => "11010010", 249 => "10110011", 250 => "01111101", 251 => "11111010", 252 => "11011100", 253 => "10100100", 254 => "01001001", 255 => "10010010"
);
begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;


architecture rod1_arch of rod1 is

type ROM_type is array (0 to 255) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := (
    0 => b"01010101", 1 => b"00001011", 2 => b"00010110", 3 => b"00010010",
    4 => b"00101100", 5 => b"00000000", 6 => b"00100100", 7 => b"00110110",
    8 => b"01011000", 9 => b"00000000", 10 => b"00000000", 11 => b"00000000",
    12 => b"01001000", 13 => b"10000000", 14 => b"01101100", 15 => b"00000000",
    16 => b"01011111", 17 => b"01110111", 18 => b"00000000", 19 => b"01001011",
    20 => b"00000000", 21 => b"00000000", 22 => b"00000000", 23 => b"00011000",
    24 => b"10000111", 25 => b"01110010", 26 => b"00000001", 27 => b"01110110",
    28 => b"01000011", 29 => b"00000000", 30 => b"00000000", 31 => b"00001010",
    32 => b"01100001", 33 => b"00000000", 34 => b"00110011", 35 => b"01001110",
    36 => b"00000000", 37 => b"01011001", 38 => b"10001111", 39 => b"00000000",
    40 => b"00000000", 41 => b"01011110", 42 => b"00000000", 43 => b"00000000",
    44 => b"00000000", 45 => b"01011011", 46 => b"00110000", 47 => b"00000000",
    48 => b"00001111", 49 => b"01111100", 50 => b"01001101", 51 => b"01111011",
    52 => b"00000010", 53 => b"00000000", 54 => b"01001001", 55 => b"00000000",
    56 => b"10000110", 57 => b"00000000", 58 => b"00000000", 59 => b"10011011",
    60 => b"00000000", 61 => b"00000000", 62 => b"00010100", 63 => b"00000000",
    64 => b"01111101", 65 => b"00000000", 66 => b"00000000", 67 => b"00100000",
    68 => b"01100110", 69 => b"00000000", 70 => b"10011100", 71 => b"00000000",
    72 => b"00000000", 73 => b"01010110", 74 => b"10010111", 75 => b"01110100",
    76 => b"00011111", 77 => b"00000000", 78 => b"00000000", 79 => b"00000000",
    80 => b"00000000", 81 => b"10010101", 82 => b"00000000", 83 => b"00000000",
    84 => b"00010001", 85 => b"00000000", 86 => b"00000000", 87 => b"00000000",
    88 => b"00000000", 89 => b"10100011", 90 => b"00000000", 91 => b"01100000",
    92 => b"00000000", 93 => b"00000000", 94 => b"00011110", 95 => b"00000000",
    96 => b"01101001", 97 => b"10010100", 98 => b"10011010", 99 => b"00000000",
    100 => b"01101111", 101 => b"01110011", 102 => b"00000100", 103 => b"10001110",
    104 => b"00000000", 105 => b"00000000", 106 => b"10010010", 107 => b"00000000",
    108 => b"00000000", 109 => b"00010011", 110 => b"00001101", 111 => b"10000001",
    112 => b"00000000", 113 => b"00000000", 114 => b"00000000", 115 => b"00000000",
    116 => b"00110111", 117 => b"00000111", 118 => b"00000000", 119 => b"00000000",
    120 => b"00000000", 121 => b"10011000", 122 => b"00101000", 123 => b"00000000",
    124 => b"00000000", 125 => b"10101011", 126 => b"10000101", 127 => b"00001001",
    128 => b"00000000", 129 => b"00011011", 130 => b"00000000", 131 => b"00000000",
    132 => b"01000000", 133 => b"00000000", 134 => b"10111011", 135 => b"10100101",
    136 => b"00000000", 137 => b"00001100", 138 => b"00111001", 139 => b"00111011",
    140 => b"00000000", 141 => b"00000101", 142 => b"00000000", 143 => b"00100111",
    144 => b"10101100", 145 => b"00000000", 146 => b"00101111", 147 => b"00000000",
    148 => b"10101101", 149 => b"00000000", 150 => b"00111110", 151 => b"10111101",
    152 => b"00000000", 153 => b"00000000", 154 => b"11001101", 155 => b"00000000",
    156 => b"00000000", 157 => b"00000000", 158 => b"00010000", 159 => b"00000000",
    160 => b"00000000", 161 => b"00101011", 162 => b"00111010", 163 => b"00000000",
    164 => b"00000000", 165 => b"00000000", 166 => b"00100010", 167 => b"00000000",
    168 => b"00000000", 169 => b"00000000", 170 => b"00000000", 171 => b"00000000",
    172 => b"01001010", 173 => b"00000000", 174 => b"10111001", 175 => b"01000111",
    176 => b"00000000", 177 => b"00000000", 178 => b"00101110", 179 => b"11000000",
    180 => b"00000000", 181 => b"00000000", 182 => b"00111000", 183 => b"00000000",
    184 => b"01001100", 185 => b"00000000", 186 => b"11010101", 187 => b"00111100",
    188 => b"00110100", 189 => b"00000000", 190 => b"11010010", 191 => b"00000110",
    192 => b"00101001", 193 => b"01000101", 194 => b"00110101", 195 => b"00000000",
    196 => b"00000000", 197 => b"11011110", 198 => b"00000000", 199 => b"11100110",
    200 => b"00001000", 201 => b"00000000", 202 => b"00011101", 203 => b"00000000",
    204 => b"00000000", 205 => b"00000000", 206 => b"00000000", 207 => b"00100101",
    208 => b"11011100", 209 => b"00000000", 210 => b"00010111", 211 => b"00000000",
    212 => b"00011100", 213 => b"00100110", 214 => b"11101010", 215 => b"00011010",
    216 => b"00000011", 217 => b"01000001", 218 => b"00000000", 219 => b"00000000",
    220 => b"00000000", 221 => b"00000000", 222 => b"00000000", 223 => b"00000000",
    224 => b"00000000", 225 => b"01101110", 226 => b"01100010", 227 => b"00001110",
    228 => b"01110101", 229 => b"00000000", 230 => b"01010001", 231 => b"00000000",
    232 => b"00000000", 233 => b"00000000", 234 => b"00110001", 235 => b"00111101",
    236 => b"01010000", 237 => b"00000000", 238 => b"00000000", 239 => b"01011101",
    240 => b"00000000", 241 => b"01001111", 242 => b"01001110", 243 => b"01001101",
    244 => b"00000000", 245 => b"01011101", 246 => b"00000000", 247 => b"01001111"
);

begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;


architecture rod2_arch of rod2 is

type ROM_type is array (0 to 255) of std_logic_vector(7 downto 0);

constant ROM : ROM_type := (
    0 => b"10101010", 1 => b"11110101", 2 => b"11101011", 3 => b"11110000",
    4 => b"11010111", 5 => b"00000000", 6 => b"11100001", 7 => b"11010000",
    8 => b"10101111", 9 => b"00000000", 10 => b"00000000", 11 => b"00000000",
    12 => b"11000011", 13 => b"10001100", 14 => b"10100001", 15 => b"00000000",
    16 => b"10110000", 17 => b"10011001", 18 => b"00000000", 19 => b"11000111",
    20 => b"00000000", 21 => b"00000000", 22 => b"00000000", 23 => b"00000000",
    24 => b"10010000", 25 => b"10100110", 26 => b"00011001", 27 => b"10100100",
    28 => b"11011000", 29 => b"00000000", 30 => b"00000000", 31 => b"00010101",
    32 => b"10111110", 33 => b"00000000", 34 => b"11101110", 35 => b"11010100",
    36 => b"00000000", 37 => b"11001011", 38 => b"10010110", 39 => b"00000000",
    40 => b"00000000", 41 => b"11001010", 42 => b"00000000", 43 => b"00000000",
    44 => b"00000000", 45 => b"11010001", 46 => b"11111101", 47 => b"00000000",
    48 => b"00100001", 49 => b"10110100", 50 => b"11100100", 51 => b"10110111",
    52 => b"00110010", 53 => b"00000000", 54 => b"11101100", 55 => b"00000000",
    56 => b"10110001", 57 => b"00000000", 58 => b"00000000", 59 => b"10011111",
    60 => b"00000000", 61 => b"00000000", 62 => b"00101010", 63 => b"00000000",
    64 => b"11000010", 65 => b"00000000", 66 => b"00000000", 67 => b"00100011",
    68 => b"11011101", 69 => b"00000000", 70 => b"10101001", 71 => b"00000000",
    72 => b"00000000", 73 => b"11110010", 74 => b"10110010", 75 => b"11010110",
    76 => b"00101101", 77 => b"00000000", 78 => b"00000000", 79 => b"00000000",
    80 => b"00000000", 81 => b"10111100", 82 => b"00000000", 83 => b"00000000",
    84 => b"01000100", 85 => b"00000000", 86 => b"00000000", 87 => b"00000000",
    88 => b"00000000", 89 => b"10110110", 90 => b"00000000", 91 => b"11111011",
    92 => b"00000000", 93 => b"00000000", 94 => b"01000010", 95 => b"00000000",
    96 => b"11101000", 97 => b"11000110", 98 => b"11001001", 99 => b"00000000",
    100 => b"11110110", 101 => b"11110011", 102 => b"01100100", 103 => b"11011010",
    104 => b"00000000", 105 => b"00000000", 106 => b"11011001", 107 => b"00000000",
    108 => b"00000000", 109 => b"01011100", 110 => b"01100011", 111 => b"11101111",
    112 => b"00000000", 113 => b"00000000", 114 => b"00000000", 115 => b"00000000",
    116 => b"00111111", 117 => b"01110000", 118 => b"00000000", 119 => b"00000000",
    120 => b"00000000", 121 => b"11100010", 122 => b"01010100", 123 => b"00000000",
    124 => b"00000000", 125 => b"11010011", 126 => b"11111010", 127 => b"01111000",
    128 => b"00000000", 129 => b"01101000", 130 => b"00000000", 131 => b"00000000",
    132 => b"01000110", 133 => b"00000000", 134 => b"11001100", 135 => b"11100011",
    136 => b"00000000", 137 => b"01111111", 138 => b"01010011", 139 => b"01010010",
    140 => b"00000000", 141 => b"10001010", 142 => b"00000000", 143 => b"01101001",
    144 => b"11100101", 145 => b"00000000", 146 => b"01100101", 147 => b"11101000",
    148 => b"00000000", 149 => b"01011010", 150 => b"11011011", 151 => b"00000000",
    152 => b"00000000", 153 => b"11001111", 154 => b"00000000", 155 => b"00000000",
    156 => b"00000000", 157 => b"10010001", 158 => b"00000000", 159 => b"01111001",
    160 => b"01101010", 161 => b"00000000", 162 => b"00000000", 163 => b"00000000",
    164 => b"10001000", 165 => b"00000000", 166 => b"00000000", 167 => b"00000000",
    168 => b"00000000", 169 => b"00000000", 170 => b"00000000", 171 => b"00000000",
    172 => b"01100111", 173 => b"00000000", 174 => b"11111001", 175 => b"01000111",
    176 => b"00000000", 177 => b"00000000", 178 => b"11100110", 179 => b"11110000",
    180 => b"00000000", 181 => b"00000000", 182 => b"11101010", 183 => b"00000000",
    184 => b"01100100", 185 => b"00000000", 186 => b"11101111", 187 => b"00111100",
    188 => b"00110100", 189 => b"00000000", 190 => b"11110100", 191 => b"01110010",
    192 => b"11100011", 193 => b"10100010", 194 => b"00110101", 195 => b"00000000",
    196 => b"00000000", 197 => b"11101110", 198 => b"00000000", 199 => b"11111100",
    200 => b"00001000", 201 => b"00000000", 202 => b"00011101", 203 => b"11100001",
    204 => b"11100000", 205 => b"00000000", 206 => b"10101111", 207 => b"10101111",
    208 => b"10101111", 209 => b"11110101", 210 => b"00000000", 211 => b"11010111",
    212 => b"00000000", 213 => b"00000000", 214 => b"00000000", 215 => b"00000000",
    216 => b"11100110", 217 => b"10100111", 218 => b"00000000", 219 => b"00000000",
    220 => b"11101110", 221 => b"00000000", 222 => b"10101111", 223 => b"10101111",
    224 => b"00000000", 225 => b"11000111", 226 => b"00000000", 227 => b"11001111",
    228 => b"11111111", 229 => b"11100011", 230 => b"00000000", 231 => b"11101001",
    232 => b"00000000", 233 => b"11110101", 234 => b"11000110", 235 => b"11000110",
    236 => b"00000000", 237 => b"10110110", 238 => b"00000000", 239 => b"10101111",
    240 => b"11000111", 241 => b"00000000", 242 => b"00000000", 243 => b"11001000",
    244 => b"00000000", 245 => b"00000000", 246 => b"00000000", 247 => b"11011000",
    248 => b"00000000", 249 => b"00000000", 250 => b"11110010", 251 => b"11110010",
    252 => b"00000000", 253 => b"11000010", 254 => b"00000000", 255 => b"00000000"
);

begin

data_out <= ROM(to_integer(unsigned(num)));

end architecture;



architecture tjekrod_arch of tjekrod is

type ROM_type is array (0 to 255) of std_logic;

constant ROM : ROM_type := (
    0 => '1',
	 1 => '1',
	 2 => '1',
	 3 => '1',
	 4 => '1',
	 5 => '0',
	 6 => '1', 7 => '1',
    8 => '1', 9 => '0', 10 => '0', 11 => '0', 12 => '1', 13 => '1', 14 => '1', 15 => '0',
    16 => '1', 17 => '1', 18 => '0', 19 => '1', 20 => '0', 21 => '0', 22 => '0', 23 => '1',
    24 => '1', 25 => '1', 26 => '1', 27 => '1', 28 => '1', 29 => '0', 30 => '0', 31 => '1',
    32 => '1', 33 => '0', 34 => '1', 35 => '1', 36 => '0', 37 => '1', 38 => '1', 39 => '0',
    40 => '0', 41 => '1', 42 => '0', 43 => '0', 44 => '0', 45 => '1', 46 => '1', 47 => '0',
    48 => '1', 49 => '1', 50 => '1', 51 => '1', 52 => '1', 53 => '0', 54 => '1', 55 => '0',
    56 => '1', 57 => '0', 58 => '0', 59 => '1', 60 => '0', 61 => '0', 62 => '1', 63 => '0',
    64 => '1', 65 => '0', 66 => '0', 67 => '1', 68 => '1', 69 => '0', 70 => '1', 71 => '0',
    72 => '0', 73 => '1', 74 => '1', 75 => '1', 76 => '1', 77 => '0', 78 => '0', 79 => '0',
    80 => '0', 81 => '0', 82 => '1', 83 => '0', 84 => '0', 85 => '1', 86 => '0', 87 => '0',
    88 => '0', 89 => '0', 90 => '1', 91 => '0', 92 => '1', 93 => '0', 94 => '0', 95 => '0',
    96 => '1', 97 => '0', 98 => '1', 99 => '1', 100 => '1', 101 => '0', 102 => '1', 103 => '1',
    104 => '1', 105 => '1', 106 => '0', 107 => '0', 108 => '1', 109 => '0', 110 => '0', 111 => '1',
    112 => '1', 113 => '1', 114 => '0', 115 => '0', 116 => '0', 117 => '0', 118 => '1', 119 => '1',
    120 => '0', 121 => '0', 122 => '0', 123 => '1', 124 => '1', 125 => '0', 126 => '0', 127 => '1',
    128 => '1', 129 => '1', 130 => '0', 131 => '1', 132 => '0', 133 => '0', 134 => '1', 135 => '0',
    136 => '1', 137 => '1', 138 => '0', 139 => '1', 140 => '1', 141 => '1', 142 => '0', 143 => '1',
    144 => '0', 145 => '1', 146 => '1', 147 => '0', 148 => '1', 149 => '0', 150 => '1', 151 => '0',
    152 => '1', 153 => '1', 154 => '0', 155 => '0', 156 => '0', 157 => '1', 158 => '0', 159 => '0',
    160 => '0', 161 => '1', 162 => '0', 163 => '0', 164 => '1', 165 => '1', 166 => '0', 167 => '0',
    168 => '0', 169 => '0', 170 => '0', 171 => '1', 172 => '0', 173 => '1', 174 => '1', 175 => '0',
    176 => '0', 177 => '1', 178 => '1', 179 => '1', 180 => '1', 181 => '0', 182 => '1', 183 => '1',
    184 => '0', 185 => '0', 186 => '0', 187 => '0', 188 => '0', 189 => '0', 190 => '1', 191 => '0',
    192 => '1', 193 => '1', 194 => '1', 195 => '1', 196 => '0', 197 => '1', 198 => '0', 199 => '0',
    200 => '0', 201 => '0', 202 => '1', 203 => '1', 204 => '1', 205 => '1', 206 => '0', 207 => '1',
    208 => '1', 209 => '0', 210 => '0', 211 => '0', 212 => '0', 213 => '0', 214 => '0', 215 => '1',
    216 => '1', 217 => '0', 218 => '1', 219 => '0', 220 => '1', 221 => '1', 222 => '1', 223 => '1',
    224 => '0', 225 => '1', 226 => '1', 227 => '0', 228 => '0', 229 => '0', 230 => '0', 231 => '0',
    232 => '0', 233 => '0', 234 => '1', 235 => '1', 236 => '0', 237 => '1', 238 => '0', 239 => '1',
    240 => '1', 241 => '1', 242 => '1', 243 => '0', 244 => '1', 245 => '1', 246 => '0', 247 => '0',
    248 => '0', 249 => '0', 250 => '0', 251 => '0', 252 => '0', 253 => '0', 254 => '1', 255 => '1');

begin

	data_out <= ROM(to_integer(unsigned(num)));

end architecture;
