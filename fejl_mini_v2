
--=======================================================
--  Entity decleration


library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity fejlretmini is
	port(
		CLK : in std_logic;
		f0  : in std_logic;
		f1  :	in std_logic;
		f2  : in std_logic;
		e1  : in std_logic_vector(2 downto 0);
		e21 :  in std_logic_vector(3 downto 0);
		e22 : in std_logic_vector(3 downto 0);
		dat_in : in std_logic_vector(6 downto 0);
		dat_out : out std_logic_vector(6 downto 0));
		
end entity fejlretmini;
		
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity fejl_v is
port (num		:	in std_logic_vector(2 downto 0);
		data_out	:	out std_logic_vector(6 downto 0));
end entity;

--=======================================================

    --DE10_LITE_Empty_Top: 
    --
	-------------- CLOCK ----------
	--input 		          		ADC_CLK_10,
	--input 		          		MAX10_CLK1_50,
	--input 		          		MAX10_CLK2_50,
    --
	-------------- SDRAM ----------
	--output		    [12:0]		DRAM_ADDR,
	--output		     [1:0]		DRAM_BA,
	--output		          		DRAM_CAS_N,
	--output		          		DRAM_CKE,
	--output		          		DRAM_CLK,
	--output		          		DRAM_CS_N,
	--inout 		    [15:0]		DRAM_DQ,
	--output		          		DRAM_LDQM,
	--output		          		DRAM_RAS_N,
	--output		          		DRAM_UDQM,
	--output		          		DRAM_WE_N,
    --
	-------------- SEG7 ----------
	--output		     [7:0]		HEX0,
	--output		     [7:0]		HEX1,
	--output		     [7:0]		HEX2,
	--output		     [7:0]		HEX3,
	--output		     [7:0]		HEX4,
	--output		     [7:0]		HEX5,
    --
	-------------- KEY ----------
	--input 		     [1:0]		KEY,
    --
	-------------- LED ----------
	--output		     [9:0]		LEDR,
    --
	-------------- SW ----------
	--input 		     [9:0]		SW,
    --
	-------------- VGA ----------
	--output		     [3:0]		VGA_B,
	--output		     [3:0]		VGA_G,
	--output		          		VGA_HS,
	--output		     [3:0]		VGA_R,
	--output		          		VGA_VS,
    --
	-------------- Accelerometer ----------
	--output		          		GSENSOR_CS_N,
	--input 		     [2:1]		GSENSOR_INT,
	--output		          		GSENSOR_SCLK,
	--inout 		          		GSENSOR_SDI,
	--inout 		          		GSENSOR_SDO,
    --
	-------------- Arduino ----------
	--inout 		    [15:0]		ARDUINO_IO,
	--inout 		          		ARDUINO_RESET_N,
    --
	-------------- GPIO, GPIO connect to GPIO Default ----------
	--inout 		    [35:0]		GPIO




--=======================================================
-- Architecture declaration
--=======================================================

architecture fejlretmini_arch of fejlretmini is


signal fejlv1 : std_logic_vector(6 downto 0);
signal fejlv21 : std_logic_vector(6 downto 0);
signal fejlv22 : std_logic_vector(6 downto 0);


component fejl_v
port (num		:	in std_logic_vector(2 downto 0);
		data_out	:	out std_logic_vector(6 downto 0));
end component;



begin

fejl1 : fejl_v port map(num => e1, data_out => fejlv1);
fejl2 : fejl_v port map(num => e21(2 downto 0), data_out => fejlv21);
fejl3 : fejl_v port map(num => e22(2 downto 0), data_out => fejlv22);


process(CLK)

	begin
	
	if(rising_edge(CLK)) then
	
		if(f0 = '1') then
			dat_out <= dat_in;
		
		elsif(f1 = '1') then
			dat_out <= dat_in xor fejlv1;
		
		elsif(f2 = '1') then
			dat_out <= dat_in xor(fejlv21 xor fejlv22);
		
		elsif(f0 = '0' and f1 = '0' and f2 = '0') then
			dat_out <= dat_in;
		end if;
		
	end if;
	
end process;

end architecture;

architecture fejl_v_arch of fejl_v is

	type ROM_type is array (0 to 7) of std_logic_vector(6 downto 0);

	constant ROM : ROM_type :=	(
											0 =>  b"0000000",
											1 =>  b"1000000",
											2 =>  b"0100000",
											3 =>  b"0010000",
											4 =>  b"0001000",
											5 =>  b"0000100",
											6 =>  b"0000010",
											7 =>  b"0000001");					

	begin

		data_out <= ROM(to_integer(unsigned(num)));

end architecture;

