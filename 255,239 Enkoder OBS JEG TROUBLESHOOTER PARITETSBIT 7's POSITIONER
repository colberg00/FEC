
--=======================================================
--  Entity decleration

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity bch_encoder is
port (
		clk : in  STD_LOGIC;
		reset : in  STD_LOGIC;
		message : in  STD_LOGIC_VECTOR (0 to 238);
		parity_bits : out STD_LOGIC_VECTOR (0 to 15)
);
end entity bch_encoder;

--=======================================================

    --DE10_LITE_Empty_Top: 
    --
	-------------- CLOCK ----------
	--input 		          		ADC_CLK_10,
	--input 		          		MAX10_CLK1_50,
	--input 		          		MAX10_CLK2_50,
    --
	-------------- SDRAM ----------
	--output		    [12:0]		DRAM_ADDR,
	--output		     [1:0]		DRAM_BA,
	--output		          		DRAM_CAS_N,
	--output		          		DRAM_CKE,
	--output		          		DRAM_CLK,
	--output		          		DRAM_CS_N,
	--inout 		    [15:0]		DRAM_DQ,
	--output		          		DRAM_LDQM,
	--output		          		DRAM_RAS_N,
	--output		          		DRAM_UDQM,
	--output		          		DRAM_WE_N,
    --
	-------------- SEG7 ----------
	--output		     [7:0]		HEX0,
	--output		     [7:0]		HEX1,
	--output		     [7:0]		HEX2,
	--output		     [7:0]		HEX3,
	--output		     [7:0]		HEX4,
	--output		     [7:0]		HEX5,
    --
	-------------- KEY ----------
	--input 		     [1:0]		KEY,
    --
	-------------- LED ----------
	--output		     [9:0]		LEDR,
    --
	-------------- SW ----------
	--input 		     [9:0]		SW,
    --
	-------------- VGA ----------
	--output		     [3:0]		VGA_B,
	--output		     [3:0]		VGA_G,
	--output		          		VGA_HS,
	--output		     [3:0]		VGA_R,
	--output		          		VGA_VS,
    --
	-------------- Accelerometer ----------
	--output		          		GSENSOR_CS_N,
	--input 		     [2:1]		GSENSOR_INT,
	--output		          		GSENSOR_SCLK,
	--inout 		          		GSENSOR_SDI,
	--inout 		          		GSENSOR_SDO,
    --
	-------------- Arduino ----------
	--inout 		    [15:0]		ARDUINO_IO,
	--inout 		          		ARDUINO_RESET_N,
    --
	-------------- GPIO, GPIO connect to GPIO Default ----------
	--inout 		    [35:0]		GPIO




--=======================================================
-- Architecture declaration

architecture Behavioral of bch_encoder is
type integer_array is array (natural range <>) of integer;
constant paritypositions0 : integer_array := (0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 41, 50, 52, 53, 54, 55, 58, 62, 63, 65, 70, 72, 74, 80, 83, 84, 86, 89, 91, 93, 95, 96, 98, 100, 101, 104, 107, 109, 110, 111, 113, 115, 116, 118, 119, 120, 121, 122, 123, 126, 130, 132, 133, 135, 142, 143, 149, 151, 152, 153, 154, 155, 159, 162, 164, 165, 167, 170, 173, 174, 175, 176, 177, 178, 179, 183, 185, 186, 187, 188, 189, 195, 197, 198, 203, 205, 209, 210, 213, 214, 216, 217, 218, 219, 222, 223, 224, 226, 231, 233, 234, 235, 236, 237);
constant paritypositions1 : integer_array := (1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 16, 17, 20, 21, 22, 26, 27, 28, 29, 31, 33, 35, 36, 37, 39, 42, 51, 53, 54, 55, 56, 59, 63, 64, 66, 71, 73, 75, 81, 84, 85, 87, 90, 92, 94, 96, 97, 99, 101, 102, 105, 108, 110, 111, 112, 114, 116, 117, 119, 120, 121, 122, 123, 124, 127, 131, 133, 134, 136, 143, 144, 150, 152, 153, 154, 155, 156, 160, 163, 165, 166, 168, 171, 174, 175, 176, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 196, 198, 199, 204, 206, 210, 211, 214, 215, 217, 218, 219, 220, 223, 224, 225, 227, 232, 234, 235, 236, 237, 238);
constant paritypositions2 : integer_array := (0, 1, 5, 6, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 29, 35, 37, 40, 41, 43, 50, 53, 56, 57, 58, 60, 62, 63, 64, 67, 70, 76, 80, 82, 83, 84, 85, 88, 89, 96, 97, 101, 102, 103, 104, 106, 107, 110, 112, 116, 117, 119, 124, 125, 126, 128, 130, 133, 134, 137, 142, 143, 144, 145, 149, 152, 156, 157, 159, 161, 162, 165, 166, 169, 170, 172, 173, 174, 180, 181, 183, 186, 190, 191, 195, 198, 199, 200, 203, 207, 209, 210, 211, 212, 213, 214, 215, 217, 220, 221, 222, 223, 225, 228, 231, 234, 238);
constant paritypositions3 : integer_array := (0, 3, 4, 6, 7, 8, 11, 12, 14, 17, 18, 23, 24, 25, 28, 32, 34, 35, 42, 44, 50, 51, 52, 53, 55, 57, 59, 61, 62, 64, 68, 70, 71, 72, 74, 77, 80, 81, 85, 90, 91, 93, 95, 96, 97, 100, 101, 102, 103, 105, 108, 109, 110, 115, 116, 117, 119, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 142, 144, 145, 146, 149, 150, 151, 152, 154, 155, 157, 158, 159, 160, 163, 164, 165, 166, 171, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 212, 215, 217, 219, 221, 229, 231, 232, 233, 234, 236, 237);
constant paritypositions4 : integer_array := (1, 4, 5, 7, 8, 9, 12, 13, 15, 18, 19, 24, 25, 26, 29, 33, 35, 36, 43, 45, 51, 52, 53, 54, 56, 58, 60, 62, 63, 65, 69, 71, 72, 73, 75, 78, 81, 82, 86, 91, 92, 94, 96, 97, 98, 101, 102, 103, 104, 106, 109, 110, 111, 116, 117, 118, 120, 122, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 139, 143, 145, 146, 147, 150, 151, 152, 153, 155, 156, 158, 159, 160, 161, 164, 165, 166, 167, 172, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 209, 210, 212, 213, 216, 218, 220, 222, 230, 232, 233, 234, 235, 237, 238);
constant paritypositions5 : integer_array := (0, 1, 3, 4, 5, 6, 11, 12, 13, 14, 15, 21, 28, 32, 35, 37, 38, 41, 44, 46, 50, 57, 58, 59, 61, 62, 64, 65, 66, 73, 76, 79, 80, 82, 84, 86, 87, 89, 91, 92, 96, 97, 99, 100, 101, 102, 103, 105, 109, 112, 113, 115, 116, 117, 120, 122, 124, 125, 126, 127, 129, 130, 131, 134, 136, 140, 142, 143, 144, 146, 147, 148, 149, 155, 156, 157, 160, 161, 164, 166, 168, 170, 174, 175, 176, 177, 180, 181, 184, 189, 190, 191, 193, 194, 195, 199, 200, 201, 202, 206, 207, 209, 211, 216, 218, 221, 222, 224, 226, 237, 238);
constant paritypositions6 : integer_array := (0, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 39, 41, 42, 45, 47, 50, 51, 52, 53, 54, 55, 59, 60, 66, 67, 70, 72, 77, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 102, 103, 106, 107, 109, 111, 114, 115, 117, 119, 120, 122, 125, 127, 128, 131, 133, 137, 141, 142, 144, 145, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 169, 170, 171, 173, 174, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 205, 207, 208, 209, 212, 213, 214, 216, 218, 224, 225, 226, 227, 231, 233, 234, 235, 236, 237, 238);
constant paritypositions7 : integer_array := (0, 2, 3, 6, 7, 14, 16, 19, 22, 23, 25, 29, 31, 32, 33, 38, 40, 41, 42, 43, 46, 48, 50, 51, 56, 58, 60, 61, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 78, 80, 82, 83, 84, 85, 87, 88, 90, 92, 95, 97, 100, 101, 103, 108, 109, 111, 112, 113, 119, 122, 128, 129, 130, 133, 134, 135, 138, 145, 146, 148, 156, 157, 158, 160, 164, 167, 171, 172, 173, 176, 177, 178, 179, 180, 182, 184, 185, 186, 190, 191, 192, 193, 199, 201, 202, 205, 206, 208, 215, 216, 218, 222, 223, 224, 225, 227, 228, 231, 232, 233, 238);
constant paritypositions8 : integer_array := (0, 2, 7, 9, 10, 11, 12, 16, 17, 19, 21, 23, 24, 25, 27, 28, 33, 35, 36, 38, 39, 42, 43, 44, 47, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 64, 65, 66, 68, 69, 70, 71, 73, 75, 79, 80, 81, 85, 88, 95, 100, 102, 107, 111, 112, 114, 115, 116, 118, 119, 121, 122, 126, 129, 131, 132, 133, 134, 136, 139, 142, 143, 146, 147, 151, 152, 153, 154, 155, 157, 158, 161, 162, 164, 167, 168, 170, 172, 175, 176, 180, 181, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 202, 205, 206, 207, 210, 213, 214, 218, 222, 225, 228, 229, 231, 232, 235, 236, 237);
constant paritypositions9 : integer_array := (1, 3, 8, 10, 11, 12, 13, 17, 18, 20, 22, 24, 25, 26, 28, 29, 34, 36, 37, 39, 40, 43, 44, 45, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 62, 65, 66, 67, 69, 70, 71, 72, 74, 76, 80, 81, 82, 86, 89, 96, 101, 103, 108, 112, 113, 115, 116, 117, 119, 120, 122, 123, 127, 130, 132, 133, 134, 135, 137, 140, 143, 144, 147, 148, 152, 153, 154, 155, 156, 158, 159, 162, 163, 165, 168, 169, 171, 173, 176, 177, 181, 182, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 203, 206, 207, 208, 211, 214, 215, 219, 223, 226, 229, 230, 232, 233, 236, 237, 238);
constant paritypositions10 : integer_array := (0, 1, 3, 8, 10, 13, 14, 15, 16, 18, 20, 23, 28, 29, 32, 34, 36, 37, 40, 44, 45, 46, 49, 50, 51, 54, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 71, 73, 74, 75, 77, 80, 81, 82, 84, 86, 87, 89, 90, 91, 93, 95, 96, 97, 98, 100, 101, 102, 107, 110, 111, 114, 115, 117, 119, 122, 124, 126, 128, 130, 131, 132, 134, 136, 138, 141, 142, 143, 144, 145, 148, 151, 152, 156, 157, 160, 162, 163, 165, 166, 167, 169, 172, 173, 175, 176, 179, 182, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 198, 199, 200, 202, 203, 204, 205, 207, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 226, 227, 230, 235, 236, 238);
constant paritypositions11 : integer_array := (0, 3, 8, 10, 12, 14, 17, 20, 24, 25, 26, 27, 28, 29, 32, 33, 34, 36, 37, 45, 46, 47, 51, 53, 54, 57, 59, 60, 61, 65, 66, 67, 68, 69, 70, 75, 76, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 113, 119, 121, 122, 125, 126, 127, 129, 130, 131, 137, 139, 144, 145, 146, 151, 154, 155, 157, 158, 159, 161, 162, 163, 165, 166, 168, 175, 178, 179, 180, 185, 190, 191, 192, 194, 198, 199, 200, 201, 204, 206, 208, 210, 211, 215, 217, 220, 221, 222, 226, 227, 228, 233, 234, 235);
constant paritypositions12 : integer_array := (1, 4, 9, 11, 13, 15, 18, 21, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 46, 47, 48, 52, 54, 55, 58, 60, 61, 62, 66, 67, 68, 69, 70, 71, 76, 77, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 108, 109, 110, 111, 113, 114, 120, 122, 123, 126, 127, 128, 130, 131, 132, 138, 140, 145, 146, 147, 152, 155, 156, 158, 159, 160, 162, 163, 164, 166, 167, 169, 176, 179, 180, 181, 186, 191, 192, 193, 195, 199, 200, 201, 202, 205, 207, 209, 211, 212, 216, 218, 221, 222, 223, 227, 228, 229, 234, 235, 236);
constant paritypositions13 : integer_array := (2, 5, 10, 12, 14, 16, 19, 22, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 47, 48, 49, 53, 55, 56, 59, 61, 62, 63, 67, 68, 69, 70, 71, 72, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 102, 104, 105, 106, 109, 110, 111, 112, 114, 115, 121, 123, 124, 127, 128, 129, 131, 132, 133, 139, 141, 146, 147, 148, 153, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 170, 177, 180, 181, 182, 187, 192, 193, 194, 196, 200, 201, 202, 203, 206, 208, 210, 212, 213, 217, 219, 222, 223, 224, 228, 229, 230, 235, 236, 237);
constant paritypositions14 : integer_array := (3, 6, 11, 13, 15, 17, 20, 23, 27, 28, 29, 30, 31, 32, 35, 36, 37, 39, 40, 48, 49, 50, 54, 56, 57, 60, 62, 63, 64, 68, 69, 70, 71, 72, 73, 78, 79, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 102, 103, 105, 106, 107, 110, 111, 112, 113, 115, 116, 122, 124, 125, 128, 129, 130, 132, 133, 134, 140, 142, 147, 148, 149, 154, 157, 158, 160, 161, 162, 164, 165, 166, 168, 169, 171, 178, 181, 182, 183, 188, 193, 194, 195, 197, 201, 202, 203, 204, 207, 209, 211, 213, 214, 218, 220, 223, 224, 225, 229, 230, 231, 236, 237, 238);
constant paritypositions15 : integer_array := (0, 1, 2, 3, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 24, 25, 26, 27, 29, 31, 33, 34, 35, 37, 40, 49, 51, 52, 53, 54, 57, 61, 62, 64, 69, 71, 73, 79, 82, 83, 85, 88, 90, 92, 94, 95, 97, 99, 100, 103, 106, 108, 109, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 125, 129, 131, 132, 134, 141, 142, 148, 150, 151, 152, 153, 154, 158, 161, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 178, 182, 184, 185, 186, 187, 188, 194, 196, 197, 202, 204, 208, 209, 212, 213, 215, 216, 217, 218, 221, 222, 223, 225, 230, 232, 233, 234, 235, 236, 238);

begin
	process(clk, reset)
	variable parity_bit : std_logic:= '0';
    begin
        if rising_edge(clk) then
            if reset = '1' then
					parity_bits <= (others => '0');
				else
				-- First parity bit calculated
					parity_bit := '0';
					for j in paritypositions0'range loop
                            parity_bit := parity_bit xor message(paritypositions0(j));
				end loop;
				parity_bits(0) <= parity_bit;
				-- Second parity bit calculated
					parity_bit := '0';
					for j in paritypositions1'range loop
                            parity_bit := parity_bit xor message(paritypositions1(j));
				end loop;
				parity_bits(1) <= parity_bit;
				-- Third parity bit calculated
					parity_bit := '0';
					for j in paritypositions2'range loop
                            parity_bit := parity_bit xor message(paritypositions2(j));
				end loop;
				parity_bits(2) <= parity_bit;
				-- Fourth parity bit calculated
					parity_bit := '0';
					for j in paritypositions3'range loop
                            parity_bit := parity_bit xor message(paritypositions3(j));
				end loop;
				parity_bits(3) <= parity_bit;
				-- Fifth parity bit calculated
					parity_bit := '0';
					for j in paritypositions4'range loop
                            parity_bit := parity_bit xor message(paritypositions4(j));
				end loop;
				parity_bits(4) <= parity_bit;
				-- Sixth parity bit calculated
					parity_bit := '0';
					for j in paritypositions5'range loop
                            parity_bit := parity_bit xor message(paritypositions5(j));
				end loop;
				parity_bits(5) <= parity_bit;
				-- Seventh parity bit calculated
					parity_bit := '0';
					for j in paritypositions6'range loop
                            parity_bit := parity_bit xor message(paritypositions6(j));
				end loop;
				parity_bits(6) <= parity_bit;
				-- Eighth parity bit calculated
					parity_bit := '0';
					for j in paritypositions7'range loop
                            parity_bit := parity_bit xor message(paritypositions7(j));
				end loop;
				parity_bits(7) <= parity_bit;
				-- Ninth parity bit calculated
					parity_bit := '0';
					for j in paritypositions8'range loop
                            parity_bit := parity_bit xor message(paritypositions8(j));
				end loop;
				parity_bits(8) <= parity_bit;
				-- Tenth parity bit calculated
					parity_bit := '0';
					for j in paritypositions9'range loop
                            parity_bit := parity_bit xor message(paritypositions9(j));
				end loop;
				parity_bits(9) <= parity_bit;
				-- Eleventh parity bit calculated
					parity_bit := '0';
					for j in paritypositions10'range loop
                            parity_bit := parity_bit xor message(paritypositions10(j));
				end loop;
				parity_bits(10) <= parity_bit;
				-- Twelfth parity bit calculated
					parity_bit := '0';
					for j in paritypositions11'range loop
                            parity_bit := parity_bit xor message(paritypositions11(j));
				end loop;
					parity_bits(11) <= parity_bit;
				-- Thirteenth parity bit calculated
					parity_bit := '0';
					for j in paritypositions12'range loop
                            parity_bit := parity_bit xor message(paritypositions12(j));
				end loop;
				parity_bits(12) <= parity_bit;
				-- Fourteenth parity bit calculated
					parity_bit := '0';
					for j in paritypositions13'range loop
                            parity_bit := parity_bit xor message(paritypositions13(j));
				end loop;
				parity_bits(13) <= parity_bit;
				-- Fifteenth parity bit calculated
					parity_bit := '0';
					for j in paritypositions14'range loop
                            parity_bit := parity_bit xor message(paritypositions14(j));
				end loop;
				parity_bits(14) <= parity_bit;
				-- Sixteenth parity bit calculated
					parity_bit := '0';
					for j in paritypositions15'range loop
                            parity_bit := parity_bit xor message(paritypositions15(j));
				end loop;
				parity_bits(15) <= parity_bit;

				end if;
			end if;
    end process;
	 
end Behavioral;



--=======================================================
